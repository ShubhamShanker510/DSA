class Solution {
private:
    TreeNode* first;
    TreeNode* prev;
    TreeNode* middle;
    TreeNode* last;

private:
    void inorder(TreeNode* root){
        if(root==NULL) return;

        inorder(root->left);

        if(prev!=NULL && (root->val < prev->val)){

            //is it first voilation
            if(first==NULL){
                first=prev;
                middle=root;
            }
            //if it is second violation
            else{
                last=root;
            }
        }
        //mark this node as previous
            prev=root;
            inorder(root->right);
    }

public:
    void recoverTree(TreeNode* root) {
        first=middle=last=NULL;
        prev=new TreeNode(INT_MIN);
        inorder(root);
        if(first && last) swap(first->val,last->val);
        else if(first && middle) swap(first->val,middle->val);     
    }
};
