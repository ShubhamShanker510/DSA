int dfs(vector<vector<int>>& grid,int i,int j){
        int m=grid.size();
        int n=grid[0].size();
        if(i>=m || i<0 || j>=n ||j<0 ||grid[i][j]==0){
            return 0;
        }

        int orignalGoldValue=grid[i][j];
        grid[i][j]=0;

        int maxGold=0;

        //up,down,left,right
        int up=dfs(grid,i-1,j);
        int down=dfs(grid,i+1,j);
        int left=dfs(grid,i,j-1);
        int right=dfs(grid,i,j+1);

        maxGold=max(maxGold,max({up,down,left,right}));


        grid[i][j]=orignalGoldValue;
        return orignalGoldValue+maxGold;

    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();

        int maxGold=0;

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]!=0){
                    maxGold=max(maxGold,dfs(grid,i,j));
                }
            }
        }

        return maxGold;
        
    }
