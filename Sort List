ListNode* merge(ListNode* left, ListNode* right) {
    ListNode dummy(0);
    ListNode* current = &dummy;

    while (left && right) {
        if (left->val < right->val) {
            current->next = left;
            left = left->next;
        } else {
            current->next = right;
            right = right->next;
        }
        current = current->next;
    }

    if (left) {
        current->next = left;
    }
    if (right) {
        current->next = right;
    }

    return dummy.next;
}

ListNode* mergeSort(ListNode* head) {
    if (!head || !head->next) {
        return head;
    }

    ListNode *slow = head, *fast = head, *prev = nullptr;

    while (fast && fast->next) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }

    prev->next = nullptr; // split the list into two halves

    ListNode* left = mergeSort(head);
    ListNode* right = mergeSort(slow);

    return merge(left, right);
}

ListNode* Solution::sortList(ListNode* A) {
    
   return mergeSort(A);
}
