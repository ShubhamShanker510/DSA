class Solution {
    void dfs(int row, int col, vector<vector<char>>& vis, vector<vector<char>>& board, int deltarow[], int deltacol[]) {
        vis[row][col] = 1;
        int n = board.size();
        int m = board[0].size();

        // Check for top, right, left, bottom
        for (int i = 0; i < 4; i++) {
            int nrow = row + deltarow[i];
            int ncol = col + deltacol[i];
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && !vis[nrow][ncol] && board[nrow][ncol] == 'O') {
                dfs(nrow, ncol, vis, board, deltarow, deltacol);
            }
        }
    }
public:
    void solve(vector<vector<char>>& board) {
        int deltarow[] = {-1, 0, 1, 0};
        int deltacol[] = {0, 1, 0, -1};

        int n = board.size();
        if (n == 0) return;
        int m = board[0].size();
         vector<vector<char>> vis(n, vector<char>(m, 0));;

        // Traverse first row and last row
        for (int j = 0; j < m; j++) {
            // First row
            if (!vis[0][j] && board[0][j] == 'O') {
                dfs(0, j, vis, board, deltarow, deltacol);
            }

            // Last row
            if (!vis[n - 1][j] && board[n - 1][j] == 'O') {
                dfs(n - 1, j, vis, board, deltarow, deltacol);
            }
        }

        // Traverse first column and last column
        for (int i = 0; i < n; i++) {
            // First column
            if (!vis[i][0] && board[i][0] == 'O') {
                dfs(i, 0, vis, board, deltarow, deltacol);
            }

            // Last column
            if (!vis[i][m - 1] && board[i][m - 1] == 'O') {
                dfs(i, m - 1, vis, board, deltarow, deltacol);
            }
        }

        // Mark surrounded 'O's as 'X'
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!vis[i][j] && board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
};

