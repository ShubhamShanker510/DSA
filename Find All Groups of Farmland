 void dfs(vector<vector<int>>& land, int row, int col, int& r1, int& c1, int& r2, int& c2) {
        if (row < 0 || col < 0 || row >= land.size() || col >= land[0].size() || land[row][col] == 0) {
            return;
        }
        
        if (r1 == -1 || c1 == -1) {
            r1 = row;
            c1 = col;
        }
       
        r2 = max(r2, row);
        c2 = max(c2, col);
        
     
        land[row][col] = 0;
        
       
        dfs(land, row + 1, col, r1, c1, r2, c2);
        dfs(land, row - 1, col, r1, c1, r2, c2);
        dfs(land, row, col + 1, r1, c1, r2, c2);
        dfs(land, row, col - 1, r1, c1, r2, c2);
    }

    vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        int m = land.size();
        int n = land[0].size();
        vector<vector<int>> result;
        
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] == 1) {
                    int r1 = -1, c1 = -1, r2 = -1, c2 = -1;
                    dfs(land, i, j, r1, c1, r2, c2);
                    result.push_back({r1, c1, r2, c2});
                }
            }
        }
        
        return result;
    }
