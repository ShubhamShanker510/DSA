long long int merge(long long arr[], long long temp[], int low, int high, int mid) {
        long long count = 0;
        int i = low;
        int j = mid + 1;
        int k = 0;

        while (i <= mid && j <= high) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                count += (mid - i + 1);
            }
        }

        while (i <= mid) {
            temp[k++] = arr[i++];
        }

        while (j <= high) {
            temp[k++] = arr[j++];
        }

        for (int x = 0; x < k; x++) {
            arr[low + x] = temp[x];
        }

        return count;
    }
    
long long int mergesort(long long arr[], long long temp[], int low, int high) {
        long long count = 0;

        if (low < high) {
            int mid = low + (high - low) / 2;
            count += mergesort(arr, temp, low, mid);
            count += mergesort(arr, temp, mid + 1, high);
            count += merge(arr, temp, low, high, mid);
        }

        return count;
    }

long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        long long temp[N];
        return mergesort(arr,temp,0,N-1);
    }

};
