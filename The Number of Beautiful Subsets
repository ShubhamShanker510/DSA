 int beautifulSubsets(vector<int>& nums, int k) {
        unordered_map<int, int> freq;
        return findBSets(nums, k, 0, freq) - 1; 
    }

private:
    int findBSets(vector<int>& nums, int k, int index, unordered_map<int, int>& freq) {
        // base case
        if (index == nums.size()) {
            return 1; 
        }

       
        int pick = 0;
        int ele1 = nums[index] + k;
        int ele2 = nums[index] - k;
        if (freq.find(ele1) == freq.end() && freq.find(ele2) == freq.end()) {
        
            freq[nums[index]]++;

          
            pick = findBSets(nums, k, index + 1, freq);

        
            freq[nums[index]]--;
            if (freq[nums[index]] == 0) {
                freq.erase(nums[index]);
            }
        }

    
        int noPick = findBSets(nums, k, index + 1, freq);

        return pick + noPick;
    }
