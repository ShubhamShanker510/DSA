 bool dfs(vector<vector<char>>& board, int r ,int c, string word,int wordIndex){
        // Base case 
        if (wordIndex == word.length()) {
            return true;
        }

        // Out of bound cases
        int rows = board.size();
        int cols = board[0].size();

        if (r < 0 || c < 0 || r >= rows || c >= cols) {
            return false;
        }

        // Invalid Cases
        if (board[r][c] == ' ' || board[r][c] != word[wordIndex]) {
            return false;
        }

        // Mark as visited
        char ch = board[r][c];
        board[r][c] = ' ';

        // DFS calls
        if (dfs(board, r, c + 1, word, wordIndex + 1) ||
            dfs(board, r, c - 1, word, wordIndex + 1) ||
            dfs(board, r + 1, c, word, wordIndex + 1) ||
            dfs(board, r - 1, c, word, wordIndex + 1)) {
            return true;
        }

        // Backtracking
        board[r][c] = ch;
        return false;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
       int m = board.size();
        int n = board[0].size();
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                if (word[0] == board[r][c]) {
                    bool found = dfs(board, r, c, word, 0);
                    if (found) return true;
            }
        }
    }
        return false;
    }
